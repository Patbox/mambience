plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'org.cadixdev.licenser' version '0.6.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { 
    	url "https://maven.shedaniel.me/" 
    }
    maven {
    	url "https://maven.terraformersmc.com/releases"
    }
    maven {
        name "spigot-repo"
        url "https://hub.spigotmc.org/nexus/content/groups/public"
    }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric stuff:
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}"){
        exclude(group: "net.fabricmc.fabric-api")
    }
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"){
        exclude(group: "net.fabricmc.fabric-api")
    }
	include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"){
        exclude(group: "net.fabricmc.fabric-api")
    }
    
    // Spigot stuff:
    implementation "org.spigotmc:spigot-api:${project.spigot_version}"
}

processResources {
	inputs.property "version", project.version
	
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
	filesMatching("plugin.yml") {
		expand "version": project.version
	}
	filesMatching("version.txt") {
		expand "version": project.version
	}
}

license {
	header project.file('HEADER.txt')
	include '**/*.java'
	newLine false
	charset "UTF-8"
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
    options.release = 17
}

// create "special" versions and extract resource and data packs
task noAssetsJar(type: Zip, dependsOn: remapJar) {
	from zipTree(remapJar.outputs.files[0])
	destinationDir = file("build/libs/")
	archiveName = "${archivesBaseName}-${version}-noAssets.jar"
	
	exclude "assets/**"
}
build.dependsOn noAssetsJar

task createResourcePack(type: JavaExec, dependsOn: remapJar) {
	classpath = remapJar.outputs.files
	main = "me.andre111.mambience.resources.RPGenerator"
	
	workingDir = "${project.projectDir}/build/libs/"
}
build.dependsOn createResourcePack

task createDataPack(type: JavaExec, dependsOn: remapJar) {
	classpath = remapJar.outputs.files
	main = "me.andre111.mambience.resources.DPGenerator"
	
	workingDir = "${project.projectDir}/build/libs/"
}
build.dependsOn createDataPack

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from "LICENSE"
}
